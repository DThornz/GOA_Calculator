function [im_binarized, pixelArea]=process_img(im,spatialCalibration)
%{
    Processes a given image to extract the GOA mask and area region given
    a starting image and spatial calibration info from calibrate_scale.m

    im: Image to process
    spatialCalibration: Output from calibrate_scale.m
%}

im2=imadjust(im,[50 250]/255); % Adjust frame contrast
im3=imgaussfilt(im2,1); % Add gaussian blur to image

X=im3; % Temporarily store image as X

% % Graph cut
% foregroundInd = [8217 8219 8222 8223 8226 8228 8231 8234 8236 8237 8239 8243 8245 8741 8744 8745 8746 8776 8778 8780 8782 9268 9269 9794 9795 10321 10322 10847 10848 10850 11374 11375 11376 11902 11903 12431 12960 12961 13488 13489 14018 14547 ];
% backgroundInd = [2698 2699 2701 2702 2704 3223 3224 3239 3752 4280 4808 5336 5864 6393 6394 6922 7981 8510 8511 9039 10098 10628 11157 11686 12216 12745 12746 13275 13805 14865 15395 15925 16455 ];
% L = superpixels(X,2909);
% BW = lazysnapping(X,L,foregroundInd,backgroundInd);
% 
% % Flood fill
% row = 65;
% column = 46;
% tolerance = 255;
% weightImage = graydiffweight(X, column, row, 'GrayDifferenceCutoff', tolerance);
% addedRegion = imsegfmm(weightImage, column, row, 0.01);
% BW = BW | addedRegion;
% 
% % Invert mask
% BW = imcomplement(BW);
% 
% % Active contour
% iterations = 100;
% BW = activecontour(X, BW, iterations, 'Chan-Vese');
% 
% % Create masked image.
% maskedImage = X;
% maskedImage(~BW) = 0;

% % Graph cut
% foregroundInd = [71749 72300 72301 72853 73405 73406 73957 74508 75060 75070 75612 76076 76164 77265 78368 78921 79368 80022 80574 81015 81125 81675 82777 83212 83328 83880 84983 85536 86087 86641 87607 88298 88300 88857 88860 89414 89804 90523 91077 91089 91643 92002 92198 92761 93316 94199 94982 96643 96948 98857 99146 101070 101894 103279 104093 104935 106842 107692 110449 111551 111791 113755 115407 117058 117290 120590 121460 123661 126224 126411 127740 131040 133011 137411 137640 141811 143690 150292 151160 157760 159097 166251 170406 177264 182502 186622 191576 194594 200091 200935 208333 213600 216021 219863 221860 223705 226445 227541 227922 230281 232331 232471 234110 234542 235749 237388 237851 237934 239573 240610 241212 241719 241726 242287 242299 268202 268203 268748 268749 268750 268751 269296 269842 270390 270935 270938 271482 272440 272572 272576 272996 272998 273119 273120 273132 273134 273135 273138 273139 273140 273142 273143 273144 273145 273146 273549 273551 273553 273555 273559 273669 273670 273671 273672 273673 273674 273675 273677 273679 273680 274111 274113 274117 274218 274670 274672 274673 274674 274676 274677 275230 275231 275232 275234 275235 275236 275237 275239 275240 275241 275791 ];
% backgroundInd = [11641 11644 11647 11650 11654 12186 12189 12734 14380 15475 15478 17123 17671 19865 20962 22060 23156 24255 27000 27548 28647 29195 29745 30293 30842 32490 33039 33589 34138 34688 35237 35787 36337 37437 125103 125104 130611 139979 145489 146042 146594 147699 148804 149356 150460 151013 151565 152118 152670 153221 153222 240326 246369 251314 254062 255709 258457 262851 263400 264498 265597 267243 267790 267792 268338 268885 268886 269434 270463 271012 271562 272110 272660 273757 273758 274306 274855 275402 275404 275951 276499 277047 277048 277595 278144 278691 278692 278693 279241 282500 282907 282908 282909 282910 282911 282912 283035 283036 283037 283038 283039 283040 283042 283463 283464 283465 283466 283467 283468 283469 283471 283472 283473 283474 283476 283580 283582 283583 284126 284127 284128 285206 ];
% L = superpixels(X,2760);
% BW = lazysnapping(X,L,foregroundInd,backgroundInd);
% 
% % Active contour
% iterations = 100;
% BW = activecontour(X, BW, iterations, 'edge');
% 
% % Clear borders
% BW = imclearborder(BW);
% 
% % Invert mask
% BW = imcomplement(BW);
% 
% % Clear borders
% BW = imclearborder(BW);
% 
% % Create masked image.
% maskedImage = X;
% maskedImage(~BW) = 0;

% Graph cut
foregroundInd
backgroundInd = [13759 13761 14327 14332 15466 16035 17742 18881 20019 22295 23433 24570 26846 28554 30831 31970 33108 34247 162225 162791 162793 162794 163360 163928 164495 165062 165627 165629 166192 166759 167326 168459 168461 169597 170163 170164 170165 170733 255348 256486 256487 257056 257626 258195 258765 259334 259903 260473 261042 262179 262748 263887 265024 266731 267868 269007 269576 270713 271851 272419 273556 274125 275262 275830 276967 278674 278816 279241 280379 280492 280493 280494 280945 281065 281636 281639 281678 282082 282212 282821 283927 283965 284539 284543 284925 285495 285642 285687 286262 286630 287357 287978 288334 289072 289470 289697 290217 290841 291743 291932 291984 292878 293077 293128 294271 294580 294792 295414 295938 295987 296283 296511 297129 297653 297701 297987 298226 298228 298230 298231 298232 299414 299987 300260 301395 301700 302272 302531 303098 303415 305129 305365 307414 307994 307995 307996 308557 308570 309143 309146 309699 310288 310861 311413 311433 311435 311984 312577 312578 312579 312581 312582 312583 312584 312585 313127 313698 314269 314840 315411 315412 ];
L = superpixels(X,1685);
BW = lazysnapping(X,L,foregroundInd,backgroundInd);

% Invert mask
BW = imcomplement(BW);

% Clear borders
BW = imclearborder(BW);

% Create masked image.
maskedImage = X;
maskedImage(~BW) = 0;

% Binarize image
im4=imbinarize(maskedImage);
im_binarized=im4;

% Calculate area of mask region
pixelArea = bwarea(im4);

% Convert area from pixel^2 to mm^2
pixelArea = pixelArea*spatialCalibration^2;

% Report GOA in units of cm^2
fprintf('GOA = %f %s%c \n',pixelArea*.01,'cm',178);

end
